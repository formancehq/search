/*
Search API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Response struct for Response
type Response struct {
	// The payload
	Data map[string]interface{} `json:"data,omitempty"`
	// The kind of the object, either \"TRANSACTION\" or \"META\"
	Kind *string `json:"kind,omitempty"`
	// The ledger
	Ledger *string `json:"ledger,omitempty"`
}

// NewResponse instantiates a new Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResponse() *Response {
	this := Response{}
	return &this
}

// NewResponseWithDefaults instantiates a new Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResponseWithDefaults() *Response {
	this := Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *Response) GetData() map[string]interface{} {
	if o == nil || isNil(o.Data) {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *Response) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *Response) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *Response) GetKind() string {
	if o == nil || isNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetKindOk() (*string, bool) {
	if o == nil || isNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *Response) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *Response) SetKind(v string) {
	o.Kind = &v
}

// GetLedger returns the Ledger field value if set, zero value otherwise.
func (o *Response) GetLedger() string {
	if o == nil || isNil(o.Ledger) {
		var ret string
		return ret
	}
	return *o.Ledger
}

// GetLedgerOk returns a tuple with the Ledger field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Response) GetLedgerOk() (*string, bool) {
	if o == nil || isNil(o.Ledger) {
		return nil, false
	}
	return o.Ledger, true
}

// HasLedger returns a boolean if a field has been set.
func (o *Response) HasLedger() bool {
	if o != nil && !isNil(o.Ledger) {
		return true
	}

	return false
}

// SetLedger gets a reference to the given string and assigns it to the Ledger field.
func (o *Response) SetLedger(v string) {
	o.Ledger = &v
}

func (o Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !isNil(o.Ledger) {
		toSerialize["ledger"] = o.Ledger
	}
	return json.Marshal(toSerialize)
}

type NullableResponse struct {
	value *Response
	isSet bool
}

func (v NullableResponse) Get() *Response {
	return v.value
}

func (v *NullableResponse) Set(val *Response) {
	v.value = val
	v.isSet = true
}

func (v NullableResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponse(val *Response) *NullableResponse {
	return &NullableResponse{value: val, isSet: true}
}

func (v NullableResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


