/*
Search API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: latest
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the Query type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Query{}

// Query struct for Query
type Query struct {
	Ledgers interface{} `json:"ledgers,omitempty"`
	NextToken interface{} `json:"nextToken,omitempty"`
	Size interface{} `json:"size,omitempty"`
	Terms interface{} `json:"terms,omitempty"`
	Target interface{} `json:"target,omitempty"`
}

// NewQuery instantiates a new Query object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuery() *Query {
	this := Query{}
	return &this
}

// NewQueryWithDefaults instantiates a new Query object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryWithDefaults() *Query {
	this := Query{}
	return &this
}

// GetLedgers returns the Ledgers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Query) GetLedgers() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Ledgers
}

// GetLedgersOk returns a tuple with the Ledgers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Query) GetLedgersOk() (*interface{}, bool) {
	if o == nil || isNil(o.Ledgers) {
		return nil, false
	}
	return &o.Ledgers, true
}

// HasLedgers returns a boolean if a field has been set.
func (o *Query) HasLedgers() bool {
	if o != nil && isNil(o.Ledgers) {
		return true
	}

	return false
}

// SetLedgers gets a reference to the given interface{} and assigns it to the Ledgers field.
func (o *Query) SetLedgers(v interface{}) {
	o.Ledgers = v
}

// GetNextToken returns the NextToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Query) GetNextToken() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.NextToken
}

// GetNextTokenOk returns a tuple with the NextToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Query) GetNextTokenOk() (*interface{}, bool) {
	if o == nil || isNil(o.NextToken) {
		return nil, false
	}
	return &o.NextToken, true
}

// HasNextToken returns a boolean if a field has been set.
func (o *Query) HasNextToken() bool {
	if o != nil && isNil(o.NextToken) {
		return true
	}

	return false
}

// SetNextToken gets a reference to the given interface{} and assigns it to the NextToken field.
func (o *Query) SetNextToken(v interface{}) {
	o.NextToken = v
}

// GetSize returns the Size field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Query) GetSize() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Query) GetSizeOk() (*interface{}, bool) {
	if o == nil || isNil(o.Size) {
		return nil, false
	}
	return &o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *Query) HasSize() bool {
	if o != nil && isNil(o.Size) {
		return true
	}

	return false
}

// SetSize gets a reference to the given interface{} and assigns it to the Size field.
func (o *Query) SetSize(v interface{}) {
	o.Size = v
}

// GetTerms returns the Terms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Query) GetTerms() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Query) GetTermsOk() (*interface{}, bool) {
	if o == nil || isNil(o.Terms) {
		return nil, false
	}
	return &o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *Query) HasTerms() bool {
	if o != nil && isNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given interface{} and assigns it to the Terms field.
func (o *Query) SetTerms(v interface{}) {
	o.Terms = v
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Query) GetTarget() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Query) GetTargetOk() (*interface{}, bool) {
	if o == nil || isNil(o.Target) {
		return nil, false
	}
	return &o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Query) HasTarget() bool {
	if o != nil && isNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given interface{} and assigns it to the Target field.
func (o *Query) SetTarget(v interface{}) {
	o.Target = v
}

func (o Query) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Query) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ledgers != nil {
		toSerialize["ledgers"] = o.Ledgers
	}
	if o.NextToken != nil {
		toSerialize["nextToken"] = o.NextToken
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	if o.Terms != nil {
		toSerialize["terms"] = o.Terms
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	return toSerialize, nil
}

type NullableQuery struct {
	value *Query
	isSet bool
}

func (v NullableQuery) Get() *Query {
	return v.value
}

func (v *NullableQuery) Set(val *Query) {
	v.value = val
	v.isSet = true
}

func (v NullableQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuery(val *Query) *NullableQuery {
	return &NullableQuery{value: val, isSet: true}
}

func (v NullableQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


